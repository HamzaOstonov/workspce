package com.is.customer_.local;import java.io.IOException;import java.lang.Object;import java.rmi.RemoteException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import bsh.Remote;import com.fasterxml.jackson.databind.ObjectMapper;import com.is.customer_.core.utils.CustomerUtils;import com.is.customer_.mobile.*;import com.is.customer_.mobile.model.MobileAuthentication;import com.is.customer_.mobile.tieto.TietoDataAccess;import com.is.customer_.sap.service.BusinessPartnerInterface;import com.is.utils.RefCBox;import com.is.utils.RefData;import org.apache.commons.lang3.StringUtils;import org.apache.commons.validator.routines.EmailValidator;import org.apache.log4j.Logger;import org.zkoss.zhtml.*;import org.zkoss.zk.ui.Component;import org.zkoss.zk.ui.Executions;import org.zkoss.zk.ui.event.*;import org.zkoss.zk.ui.util.GenericForwardComposer;import org.zkoss.zkplus.databind.AnnotateDataBinder;import org.zkoss.zul.*;import com.is.customer_.ActionsEnum;import com.is.customer_.action.Action;import com.is.customer_.action.ActionImages;import com.is.customer_.action.ActionUtils;import com.is.customer_.core.composer.CustomerComposer;import com.is.customer_.core.model.Customer;import com.is.customer_.core.model.SessionAttributes;import com.is.customer_.core.utils.GeneralUtils;import com.is.customer_.local.renderers.HistoryRenderer;import com.is.customer_.local.reports.OfficeReport;import com.is.customer_.local.reports.OfficeReportBuilder;import com.is.customer_.local.reports.REPORT_ENUM;import com.is.customer_.local.service.CustomerActionInterface;import com.is.customer_.local.service.CustomerActionService;import com.is.customer_.local.service.HistoryService;import com.is.customer_.mapping.MappingRenderer;import com.is.customer_.mapping.MappingResolver;import com.is.customer_.sap.service.SAPServiceFactory;import com.is.customer_.sap.service.exception.SAPDuplicationException;import com.is.customer_.ui.CustomerComposerInteractor;import com.is.user.Module;import com.is.user.UserService;import com.is.utils.CheckNull;import org.zkoss.zul.Div;import org.zkoss.zul.Messagebox;import javax.wsdl.Message;/** * Created by root on 08.05.2017. * 20:44 */public class LocalCustomerComposer extends GenericForwardComposer implements CustomerComposerInteractor {    private final static Logger logger = Logger.getLogger(LocalCustomerComposer.class);    private SessionAttributes sessionAttributes;    //private Div customerDiv;    private Include customerInclude;    private Menubar _actions;    //private Menuitem btnConfirm;    //private Menuitem btnConfirmClosed;    //private Menuitem btnCorrect;    //private Menuitem btnCorrectPhone;    //private Menuitem btnClose;    //private Menuitem btnDelete;    private Menuitem btnRefresh;    //private Menuitem btnSynchronize;    //private Menuitem btnCreateCustomer;    //private Vlayout customerLayout;    private Tabbox customerTab;    private Tab internalControlTab, appsTab, tabAdditionalClientInfo,tabBankProduct;    private Include internalControlInclude, includeDeposits, includeCards, includeTransfers,includeAdditionalClientInfo,includeBpr,includeVisa,includeTieto;    private CustomerComposer composer;    private Vlayout v_modules;    private Window historyWnd;    private Listbox historyWnd$historyListbox;    private Window modulesWindow;    private Include modulesWindow$modules;    private Window mappingWnd;    private Listbox mappingWnd$mappingList;    private Window appsWnd;    private Div appsDiv;    private RefCBox mobileCustomerStates;    private Toolbar toolbarMobileRegister;    private Toolbar toolbarMobileActions;    private Textbox mobilePhone;    private Textbox mobileEmail;    private Window mobileConfirmationCodeWnd;    private Textbox mobileConfirmationCodeWnd$confirmation;    private Toolbarbutton btnUpdateBinds, btnActivate;    //private Listbox appsListbox;    //private RefCBox appsTypes;    private SAPServiceFactory sapServiceFactory;    private CustomerActionInterface actionService;    private MobileCustomer mobileCustomer;    private IMobileCustomerService _mobileCustomerservice = new MobileCustomerService();    private TietoDataAccess tietoDataAccess = new TietoDataAccess();    private AnnotateDataBinder binder;    private String currentMobileAction;    public void doAfterCompose(Component comp) throws Exception {        super.doAfterCompose(comp);        initSessionAttributes();        composer = (CustomerComposer)                customerInclude.getLastChild().getAttribute("customerWnd$composer");        sapServiceFactory = SAPServiceFactory.getInstance();        actionService = CustomerActionService.getInstance(sessionAttributes);        initRenderers();        //initModels();        String[] searchCodes = (String[]) param.get("searchCode");        String[] searchBranches = (String[]) param.get("searchBranch");        if (searchCodes != null && searchBranches != null)            setLocalCustomer(searchBranches[0], searchCodes[0]);        //addOperationModules();        mappingWnd$mappingList.setItemRenderer(new MappingRenderer(Events.ON_CLICK, new EventListener() {            @Override            public void onEvent(Event event) throws Exception {                Customer customer = (Customer) event.getTarget().getAttribute("customer");                setCustomer(customer);                mappingWnd.setVisible(false);            }        }, actionService, sessionAttributes));        // ?????????? ?? CustomerComposer        composer.setEventListener(new EventListener() {            @Override            public void onEvent(Event event) throws Exception {                if (event.getName().equalsIgnoreCase(Events.ON_NOTIFY)) {                    Customer customer = composer.getCustomer();                    /*2022.03.02*/                    customer.setEmp_id(""+sessionAttributes.getUid());                     /*end 2022.03.02*/                    Integer action = (Integer) event.getData();                    try {                        customer = actionService.executeAction(customer, action);                        composer.refreshCustomer(customer);                        redrawActions(customer);                        registerMobileCustomer(action, customer);                    } catch (Exception e) {                        alert(e.getMessage());                        customer.setIdSap(null);                        customer.setForceCreated(false);                    }                }            }        });        initMobileCustomer(comp);    }    private void registerMobileCustomer(int action, Customer customer) throws InterruptedException {       /* try {            MobileCustomer mobileCustomer = _mobileCustomerservice.FindCustomerByBind(customer.getBranch(), customer.getId());            if (mobileCustomer != null && mobileCustomer.getId() != null && action == ActionsEnum.ACTION_CONFIRM_BUSINESS_PARTNER.action()) {                List<Customer> binds = new ArrayList<Customer>();                binds.add(composer.getCustomer());                _mobileCustomerservice.UpdateBinds(mobileCustomer, binds, sessionAttributes);            }        } catch (Exception e) {            logger.error(e);            Messagebox.show("Во время регистрации клиента в мобильном приложении произошла ошибка");        }*/    }    private void initMobileCustomer(Component component) {        mobileCustomer = new MobileCustomer();        binder = new AnnotateDataBinder(component);        binder.bindBean("mobileCustomer", this.mobileCustomer);        binder.loadAll();        List<RefData> mobileStates = new ArrayList<RefData>();        mobileStates.add(new RefData("2", "активный"));        mobileStates.add(new RefData("3", "заблокированный"));        //mobileStates.add(new RefData("4", "закрытый"));        mobileCustomerStates.setModel(new ListModelList(mobileStates));        Events.sendEvent(mobileCustomerStates, new Event("onInitRender"));    }    private void redrawActions(Customer customer) {        _actions.getChildren().clear();        turnOffModules();        int state = customer.getIntState();        if (state == 2)            turnOnModules();        if (customer.getIdSap() != null)            appsTab.setVisible(true);        List<Action> list = ActionUtils.getCustomerActions(state, sessionAttributes.getUsername(), sessionAttributes.getPassword(), sessionAttributes.getSchema());        for (final Action action : list) {        	if (action.getAction_id()==12 || action.getAction_id()==13 || action.getAction_id()==28 || action.getAction_id()==29 || action.getAction_id()==30 ) {        	  continue;	        	}            Menuitem item = new Menuitem();            item.setLabel(action.getName());            item.setImage(ActionImages.getImageForCustomers(action.getAction_id()));            item.setAttribute("action", action.getAction_id());            item.setAttribute("deal_id", action.getDeal_id());            item.setParent(_actions);            if (action.getState_begin() != customer.getIntState())                item.setDisabled(true);            else                item.addEventListener(Events.ON_CLICK, new EventListener() {                    @Override                    public void onEvent(Event event) throws Exception {                        Integer action = (Integer) event.getTarget().getAttribute("action");                        try {                        	boolean hasPassportChanges =false;                            if (action == ActionsEnum.ACTION_CORRECT_BUSINESS_PARTNER.action()) {                                composer.getBinder().loadAll();                                Customer toCompare = actionService.getCustomer(                                        composer.getCustomer().                                                getBranch(),                                        composer.getCustomer().getId());                                boolean hasChanges = DiffUtils.hasChanges(toCompare, composer.getCustomer());                                //logger.error("Has changes " + hasChanges);                                //logger.error("Changes " + DiffUtils.printChanges(toCompare,composer.getCustomer()));                                if (!hasChanges)                                    throw new RuntimeException("Нет измененных данных ");                                hasPassportChanges = DiffUtils.hasPassportChanges(toCompare, composer.getCustomer());                                                      }                            if (composer.getCustomer().getEmp_id()==null)                             	composer.getCustomer().setEmp_id(""+sessionAttributes.getUid());                            Customer customer = actionService.executeAction(composer.getCustomer(), action);                            composer.refreshCustomer(customer);                            /* 2022.02.26 , ispravlenie pasportnie dannie etogo je klienta tolko v drugix filialax, esli imeetsa takovi*/                            String str = "";                            String branchs = "";                            if ( hasPassportChanges && action == ActionsEnum.ACTION_CORRECT_BUSINESS_PARTNER.action() ) { //19-korrektirovat                            	branchs = actionService.executeActionOtherBranch(composer.getCustomer(), action);                            	if ( branchs.length()>0 )                             		branchs="\nТакже корректированы паспортные данные в филиале: "+branchs;                               //Messagebox.show("Паспортные данные в других фила");                            }                             /*end 2022.02.26*/                            //Messagebox.show("Успешно");                            str="Успешно"+branchs;                            Messagebox.show(str);                                                        publishToEventQueue(customer);                            redrawActions(customer);                        } catch (Exception e) {                            if (e instanceof SAPDuplicationException)                                showDuplication((SAPDuplicationException) e, action);                            else                                throw e;                        }                    }                });        }    }    private void initModels() {        //appsTypes.setModel(new ListModelList(        //ReferenceDictionary.getAppsTypes(sessionAttributes.getSchema())));    }    private void initRenderers() {    }    private void addOperationModules() {        List<Module> list = UserService.getModuleInRole(99, sessionAttributes.getBranch());        for (Module module : list) {        }    }    private void initSessionAttributes() {        sessionAttributes = GeneralUtils.getSessionAttributes(session);    }    public void setLocalCustomer(String branch, String id) throws Exception {        Customer customer = actionService.getCustomer(branch, id);        //customer.setEmp_id(""+sessionAttributes.getUid());        composer.refreshCustomer(customer);        redrawActions(customer);    }    public void setSAPCustomer(String branch, String id, String idSAP) throws Exception {        Customer customer = actionService.getCustomer(branch, id);        customer.setIdSap(idSAP);        composer.refreshCustomer(customer);        redrawActions(customer);    }    public void setCustomer(Customer customer) {        composer.refreshCustomer(customer);        redrawActions(customer);    }    private void turnOffModules() {        //internalControlTab.setVisible(true);        /*if (customer.getIdSap() != null)            appsTab.setVisible(false);*/        btnRefresh.setDisabled(true);        v_modules.setVisible(false);        //v_modules.setWidth        // (null);        //customerTab.setWidth("100%");    }    private void turnOnModules() {        internalControlTab.setVisible(true);        appsTab.setVisible(true);        btnRefresh.setDisabled(false);        v_modules.setVisible(true);        //v_modules.setWidth("200px");        //customerTab.setWidth("100%");    }    private void publishToEventQueue(Customer customer) {        Events.sendEvent("onNotifyCustomer", self, customer);        //EventQueue eventsQueue = EventQueues.lookup("CUSTOMER_SAP_EQ", true);        //eventsQueue.publish(new Event(Events.ON_NOTIFY, null, customer));    }    private void showDuplication(SAPDuplicationException duplicationException, Integer action) {        composer.showMatches(duplicationException.getList(), action);        //NotificationUtils.notify(matchesWnd.getUuid(), duplicationException.getMessage());    }    public void onClick$btnCorrectPhone() {    }    public void onClick$btnHistory() {        HistoryService historyService = HistoryService.getInstance(sessionAttributes);        historyWnd.setVisible(true);        historyWnd$historyListbox.setModel(new ListModelList(historyService.getHistory(composer.getCustomer())));        historyWnd$historyListbox.setItemRenderer(new HistoryRenderer(sessionAttributes));    }    public void onClick$btnAccounts() {        //logger.error("Account Customer Id " + composer.getCustomer().getId());        modulesWindow.setVisible(true);        modulesWindow$modules.setSrc("account.zul?clientId=" + composer.getCustomer().getId());    }    public void onClick$btnSpecialChars() {        modulesWindow.setVisible(true);        modulesWindow$modules.setSrc("client_spec.zul?clientId=" +                composer.getCustomer().getId() + "&code_type=08&name=" + composer.getCustomer().getFullName());    }    public void onClick$btnExcelReport() throws InstantiationException {        Map<String, Object> map = new HashMap<String, Object>();        map.put("templatePath", Executions.getCurrent().                getDesktop().                getWebApp().                getRealPath("/reports/clients_p.xls"));        map.put("outfileName", "xl");        map.put("branch", composer.getCustomer().getBranch());        map.put("id", composer.getCustomer().getId());        map.put("customer", composer.getCustomer());        OfficeReport officeReport = new OfficeReportBuilder()                .setParams(map).                        setReport_type(REPORT_ENUM.EXCEL).createOfficeReport();        officeReport.downloadFile();    }    public void onClick$btnWordReport() throws InstantiationException {        Map<String, Object> map = new HashMap<String, Object>();        map.put("templatePath",                Executions.getCurrent().                        getDesktop().                        getWebApp().                        getRealPath("/reports/clients_word_p.doc"));        map.put("outfileName", "w");        map.put("branch", composer.getCustomer().getBranch());        map.put("id", composer.getCustomer().getId());        map.put("customer", composer.getCustomer());        OfficeReport officeReport = new OfficeReportBuilder()                .setParams(map).                        setReport_type(REPORT_ENUM.WORD).                        createOfficeReport();        officeReport.downloadFile();    }    public void onClick$btnSourceData() throws InterruptedException {        composer.showDifferences();    }    public void onClick$btnShowMapping() throws InterruptedException {        mappingWnd.setVisible(true);        try {            List<Customer> mappingList = sapServiceFactory.getMappingService().                    getMapping(null, null, composer.getCustomer().getIdSap());            mappingList = MappingResolver.sortList(mappingList, sessionAttributes.getBranch());            mappingWnd$mappingList.setModel(new ListModelList(mappingList));            mappingWnd.doModal();        } catch (Exception e) {            logger.error(CheckNull.getPstr(e));            Messagebox.show(e.getMessage());        }    }    public void onSelect$customerTab(SelectEvent event) throws InterruptedException {        Tab component = (Tab) event.getTarget();        if (component.getId().equalsIgnoreCase("internalControlTab")) {            //internalControlInclude.setVisible(true);            internalControlInclude.setSrc(null);            internalControlInclude.setSrc(                    "clientaddinfo.zul?branch=" + composer.getCustomer().getBranch() +                            "&client_id=" + composer.getCustomer().getId() +                            "&code_subject=P&alias=" + sessionAttributes.getSchema());        } else if (component.getId().equalsIgnoreCase("appsTab")) {            //onClick$btn_getFile();            appsDiv.getChildren().clear();            appsWnd =                    (Window) Executions.createComponents("/customer/apps.zul",                            appsDiv, null);            appsWnd.setClosable(true);            appsWnd.setVisible(true);            Events.sendEvent("onUploadApps", appsWnd, composer.getCustomer());        } else if (component.getId().equalsIgnoreCase("mobileCustomerTab")) {            try {                if (composer.getCustomer().getIntState() != 2) {                    Messagebox.show("Клиент недоступен для регистрации! Утвердите клиента");                } else {                    mobileCustomer = _mobileCustomerservice.FindCustomerByBind(composer.getCustomer().getBranch(), composer.getCustomer().getId());                    binder.loadAll();                    //logger.error("Mobile Customer " + new ObjectMapper().writeValueAsString(mobileCustomer));                    if (mobileCustomer == null || mobileCustomer.getId() == null) {                        enableRegisterComponents();                    } else {                        disableRegisterComponents();                    }                    binder.loadAll();                }            } catch (Exception e) {                logger.error(e);                Messagebox.show(e.getMessage());            }        } else if (component.getId().equalsIgnoreCase("tabDeposits")) {                        //internalControlInclude.setSrc(null);            //internalControlInclude.setSrc(            //        "clientaddinfo.zul?branch=" + composer.getCustomer().getBranch() +            //                "&client_id=" + composer.getCustomer().getId() +            //                "&code_subject=P&alias=" + sessionAttributes.getSchema());        	includeDeposits.setSrc("sd_books.zul?search_clients=" + composer.getCustomer().getId());        } else if (component.getId().equalsIgnoreCase("tabCards")) {            includeCards.setSrc("uz_card.zul?search_clients=" + composer.getCustomer().getId());		        } else if (component.getId().equalsIgnoreCase("tabTransfers")) {    	    includeTransfers.setSrc("dper_info.zul?search_clients=" + composer.getCustomer().getId());        } else if (component.getId().equalsIgnoreCase("tabAdditionalClientInfo")) {        	includeAdditionalClientInfo.setSrc("clientcrmaddinfo.zul?client_id=" + composer.getCustomer().getId() + "&branch="					+ composer.getCustomer().getBranch() + "&alias=" + sessionAttributes.getSchema());        } else if (component.getId().equalsIgnoreCase("tabBankProduct")) {        	includeBpr.setSrc("bpr/bpr.zul?search_clients=" + composer.getCustomer().getId() + "&branch=" + composer.getCustomer().getBranch()					+ "&current=" + composer.getCustomer().getId() + "&alias=" + sessionAttributes.getSchema());        /*} else if (component.getId().equalsIgnoreCase("tabVisa")) {        	includeVisa.setSrc("VisaTcliente.zul?search_clients=" + composer.getCustomer().getId() + "&branch=" + composer.getCustomer().getBranch()					+ "&current=" + composer.getCustomer().getId() + "&alias=" + sessionAttributes.getSchema());*/        } else if (component.getId().equalsIgnoreCase("tabTieto")) {        	includeTieto.setSrc("addcst.zul?current_client_id=" + composer.getCustomer().getId() + "&branch=" + composer.getCustomer().getBranch()					+ "&alias=" + sessionAttributes.getSchema());        }    }    private void enableRegisterComponents() {        toolbarMobileRegister.setVisible(true);        toolbarMobileActions.setVisible(false);        //mobileEmail.setReadonly(false);        //mobilePhone.setReadonly(false);    }    private void disableRegisterComponents() {        toolbarMobileRegister.setVisible(false);        toolbarMobileActions.setVisible(true);        //mobilePhone.setReadonly(true);        //mobileEmail.setReadonly(true);                //knopkalarni dostupga qarab enable qilamiz 2024.02.28        //<toolbarbutton label="Обновить" id="btnUpdateBinds" style="background:#4CAF50;color:#FFFFFF;"/>        //<toolbarbutton id="btnActivate" label="Активировать" style="background:#4CAF50;color:#FFFFFF;"/>        btnUpdateBinds.setDisabled(true);        btnActivate.setDisabled(true);        List<Action> list = ActionUtils.getCustomerActions(2, sessionAttributes.getUsername(), sessionAttributes.getPassword(), sessionAttributes.getSchema());        for (final Action action : list) {            if (action.getAction_id()==12) {            	btnUpdateBinds.setDisabled(false);            } else if (action.getAction_id()==13) {            	btnActivate.setDisabled(false);            }         }    }    public void onClick$btnSynchronize() throws Exception {        boolean contains = false;        final BusinessPartnerInterface businessPartnerService = sapServiceFactory.getBusinessPartnerService();        try {            final List<Customer> customerList = sapServiceFactory.getMappingService().getMapping(composer.getCustomer().getBranch(), composer.getCustomer().getId(), null);            if (customerList.size() == 0) {                Messagebox.show("Клиент отсутствует в системе CRM!");                return;            }            final Customer headCustomer = tietoDataAccess.findCustomer(composer.getCustomer().getBranch(), composer.getCustomer().getId());            if (headCustomer != null && headCustomer.getIntState() == 2) {                for (Customer mapping : customerList) {                    if (mapping.isCustomer()) {                        if (mapping.getBranch().equals(headCustomer.getBranch()) && mapping.getId().equals(headCustomer.getId())) {                            contains = true;                        }                    }                }                if (!contains) {                    org.zkoss.zul.Messagebox.show("Найден Клиент " + headCustomer.getName() + " "                                    + CustomerUtils.dateToString(headCustomer.getP_birthday()) + " "                                    + headCustomer.getP_passport_serial() + " " + headCustomer.getP_passport_number() + " "                                    + headCustomer.getP_post_address()                                    + ". Вы подтверждаете соотвествие? ",                            null, org.zkoss.zul.Messagebox.OK | org.zkoss.zul.Messagebox.CANCEL, org.zkoss.zul.Messagebox.NONE, new EventListener() {                                @Override                                public void onEvent(Event event) throws Exception {                                    if (org.zkoss.zul.Messagebox.ON_OK.equalsIgnoreCase(event.getName())) {                                        // Pass                                        Customer customer = businessPartnerService.get(composer.getCustomer().getBranch(), composer.getCustomer().getId(), null);                                        customer.setBranch(headCustomer.getBranch());                                        customer.setId(headCustomer.getId());                                        businessPartnerService.create(customer);                                    }                                }                            });                }                else{                    Messagebox.show("Клиент уже присутствует в системе CRM!");                }            }            else{                Messagebox.show("У клиента отсутствуют валютные карты! Клиент отсутствует в системе Тието!");            }        } catch (RemoteException e) {            Messagebox.show("Проблемы с подключением к SAP CRM");        } catch (Exception e) {            logger.error(e);        }    }    public void onClick$btnRefresh() throws Exception {        Customer customer = composer.getCustomer();        String idSAP = customer.getIdSap();        customer = actionService.getCustomer(customer.getBranch(), customer.getId());        customer.setIdSap(idSAP);        composer.refreshCustomer(customer);    }    public void onClick$btnRegister() throws Exception {        /*if (StringUtils.isEmpty(mobileCustomer.getUsername())) {            Messagebox.show("Не указаны входные параметры! Логин не может быть пустым");            return;        }*/    	//logger.error("mobile2021 b 0");        if (StringUtils.isEmpty(mobileCustomer.getPhone()) && StringUtils.isEmpty(mobileCustomer.getEmailAddress())) {            Messagebox.show("Не указаны входные параметры! Телефон или e-mail не могут быть пустыми");            return;        }        /*if (!StringUtils.isEmpty(mobileCustomer.getPhone()) && !mobileCustomer.getPhone().matches("\\d{12}")) {            Messagebox.show("Некорректные входные параметры! Телефон должен состоять из 12 цифр");            return;        }*/        if (!StringUtils.isEmpty(mobileCustomer.getEmailAddress()) && !EmailValidator.getInstance(true).isValid(mobileCustomer.getEmailAddress())) {            Messagebox.show("Некорректные входные параметры! Некорректный e-mail");            return;        }        /*if (StringUtils.containsWhitespace(mobileCustomer.getUsername())) {            Messagebox.show("Некорректные входные параметры! Логин содержит пробел");            return;        }        if (mobileCustomer.getUsername().length() <= 5) {            Messagebox.show("Некорректные входные параметры! Логин не может быть меньше 5 букв");            return;        }        if (mobileCustomer.getUsername().matches("/^[0-9A-Za-z_]+$/")) {            Messagebox.show("Некорректный входные параметры! Логин может содержать только цифры, буквы и символ '_'");            return;        }*/        try {            /*List<Customer> customerList = sapServiceFactory.getMappingService().getMapping(composer.getCustomer().getBranch(), composer.getCustomer().getId(), null);            if (customerList.size() == 0){                Messagebox.show("Клиент отсутствует в системе CRM!");                return;            }            Messagebox.show("Успешно!");*/        	//logger.error("mobile2021 b");            _mobileCustomerservice.RegisterMobileCustomer(this.mobileCustomer, sessionAttributes);            //logger.error("mobile2021 b 1");            mobileConfirmationCodeWnd.setVisible(true);            currentMobileAction = MobileCustomerAction.Save;            //logger.error("mobile2021 b 2");            mobileConfirmationCodeWnd.setAttribute("callerComponentName", "btnRegister");            mobileConfirmationCodeWnd.setVisible(true);            //logger.error("mobile2021 b 4");        } catch (RemoteException e) {        	//logger.error("mobile2021 b 5");            Messagebox.show("Проблемы с подключением к SAP CRM");        } catch (Exception e) {        	//logger.error("mobile2021 b 6");            Messagebox.show("В процессе выполнения действия произошла ошибка ! " + e.getMessage());        }    }    public void onClick$btnUpdateBinds() throws InterruptedException {    	//logger.error("mobile2021 g 0");        Customer customer = composer.getCustomer();        try {            _mobileCustomerservice.UpdateBinds(this.mobileCustomer, sessionAttributes);            mobileConfirmationCodeWnd.setVisible(true);            currentMobileAction = MobileCustomerAction.Update;        }        /*catch (RemoteException e){            Messagebox.show("Проблемы с подключением к SAP CRM");        }*/ catch (Exception e) {        	//logger.error("mobile2021 g err");            Messagebox.show("В процессе выполнения произошла ошибка! \n" + e.getMessage());        }    }    public void onClick$btnConfirm$mobileConfirmationCodeWnd(Event event) throws InterruptedException, IOException, MobileException {    	String str1 = "";		ObjectMapper objectMapper = new ObjectMapper();		        try {            //logger.error("mobile2021 a");        	final List<Customer> customerList = sapServiceFactory.getMappingService().getMapping(composer.getCustomer().getBranch(), composer.getCustomer().getId(), null);        	//logger.error("mobile2021 a 1");            if (customerList.size() == 0) {            	//logger.error("mobile2021 a 2");                Messagebox.show("Клиент отсутствует в системе CRM!");                return;            }            /*            try {				str1 = objectMapper.writerWithDefaultPrettyPrinter()						.writeValueAsString(customerList);			} catch (Exception e22) {				str1 = " onClick$btnConfirm$mobileConfirmationCodeWnd error customerList";			} finally {			}			logger.error(					"** not err onClick$btnConfirm$mobileConfirmationCodeWnd customerList  **************" + str1);			*/			            MobileAuthentication mobileAuthentication = new MobileAuthentication();            mobileAuthentication.setOtp(mobileConfirmationCodeWnd$confirmation.getValue());                        /*try {				str1 = objectMapper.writerWithDefaultPrettyPrinter()						.writeValueAsString(mobileAuthentication);			} catch (Exception e22) {				str1 = " onClick$btnConfirm$mobileConfirmationCodeWnd error mobileAuthentication";			} finally {			}			logger.error(					"** not err onClick$btnConfirm$mobileConfirmationCodeWnd mobileAuthentication  **************" + str1);			*/                        //logger.error("mobile2021 a 3");            //if (!currentMobileAction.equalsIgnoreCase(MobileCustomerAction.Update)) {                this.mobileCustomer = _mobileCustomerservice.ConfirmAction(this.mobileCustomer, customerList, sessionAttributes, currentMobileAction, mobileAuthentication);                //logger.error("mobile2021 a 4");                disableRegisterComponents();                //logger.error("mobile2021 a 5");                binder.loadAll();                Events.sendEvent(mobileCustomerStates, new Event("onInitRender"));                //logger.error("mobile2021 a 6");            //} else                //_mobileCustomerservice.ConfirmAction(this.mobileCustomer, customerList, sessionAttributes, currentMobileAction, mobileAuthentication);            Messagebox.show("Успешно");            onClick$btnCancel$mobileConfirmationCodeWnd();            //logger.error("mobile2021 a 7");        } catch (RemoteException e) {        	//logger.error("mobile2021 a 8");            Messagebox.show("Проблемы с подключением к SAP CRM");        } catch (Exception e) {        	//logger.error("mobile2021 a 9");            logger.error(e);            			/*logger.error("onClick$btnConfirm$mobileConfirmationCodeWnd1-"+mobileConfirmationCodeWnd$confirmation.getValue()+"-");			try {				str1 = objectMapper.writerWithDefaultPrettyPrinter()						.writeValueAsString(this.mobileCustomer);			} catch (Exception e22) {				str1 = " onClick$btnConfirm$mobileConfirmationCodeWnd error this.mobileCustomer";			} finally {			}			logger.error(					"** not err onClick$btnConfirm$mobileConfirmationCodeWnd this.mobileCustomer  **************" + str1);*/						/*try {				str1 = objectMapper.writerWithDefaultPrettyPrinter()						.writeValueAsString(sessionAttributes);			} catch (Exception e22) {				str1 = " onClick$btnConfirm$mobileConfirmationCodeWnd error sessionAttributes";			} finally {			}			logger.error(					"** not err onClick$btnConfirm$mobileConfirmationCodeWnd sessionAttributes  **************" + str1);*/						/*try {				str1 = objectMapper.writerWithDefaultPrettyPrinter()						.writeValueAsString(currentMobileAction);			} catch (Exception e22) {				str1 = " onClick$btnConfirm$mobileConfirmationCodeWnd error currentMobileAction";			} finally {			}			logger.error(					"** not err onClick$btnConfirm$mobileConfirmationCodeWnd currentMobileAction  **************" + str1);*/					                          Messagebox.show("В процессе выполнения произошла ошибка! \n" + e.getMessage());        }    }    public void onClick$btnCancel$mobileConfirmationCodeWnd() {        mobileConfirmationCodeWnd.setVisible(false);        mobileConfirmationCodeWnd$confirmation.setValue(null);    }    public void onClick$btnActivate() throws InterruptedException {        try {        	//logger.error("mobile2021 s");            this.mobileCustomer = _mobileCustomerservice.Activate(this.mobileCustomer, sessionAttributes);            //logger.error("mobile2021 s 1");            binder.loadAll();            //logger.error("mobile2021 s 2");            mobileConfirmationCodeWnd.setVisible(true);            //logger.error("mobile2021 s 3");            currentMobileAction = MobileCustomerAction.Activate;            //logger.error("mobile2021 s 4");        } catch (Exception e) {        	//logger.error("mobile2021 s err");            Messagebox.show("В процессе выполнения произошла ошибка! \n" + e.getMessage());        }    }    public void onClick$btnBlock() throws InterruptedException {        try {            MobileAuthentication mobileAuthentication = new MobileAuthentication();            mobileAuthentication.setOtp("1");            currentMobileAction = MobileCustomerAction.Deactivate;            this.mobileCustomer = _mobileCustomerservice.ConfirmAction(this.mobileCustomer, null,                    sessionAttributes,                    currentMobileAction, mobileAuthentication);            binder.loadAll();        } catch (Exception e) {            logger.error(e);            Messagebox.show("В процессе выполнения действия произошла ошибка! \n" + e.getMessage());        }    }    @Override    public void show(List<Customer> customers) throws Exception {        mappingWnd.setVisible(true);        //mappingWnd.doEmbedded();        mappingWnd.setMaximizable(true);        mappingWnd.setMaximized(true);        mappingWnd.doModal();        mappingWnd$mappingList.setModel(new ListModelList(customers));    }    @Override    public void show(Customer customer) throws Exception {        customerTab.setSelectedIndex(0);        setCustomer(customer);    }    @Override    public void create(Customer customer) throws Exception {        customer.initCreationAttributes(sessionAttributes.getBranch());        composer.refreshCustomer(customer);        redrawActions(customer);    }    @Override    public Customer getCurrentCustomer() throws Exception {        return composer.getCustomer();    }    public CustomerActionInterface getActionService() {        return actionService;    }    public void setActionService(CustomerActionInterface actionService) {        this.actionService = actionService;    }    public MobileCustomer getMobileCustomer() {        return mobileCustomer;    }    public void setMobileCustomer(MobileCustomer mobileCustomer) {        this.mobileCustomer = mobileCustomer;    }}